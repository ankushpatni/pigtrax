package com.pigtrax.report.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.pigtrax.cache.RefDataCache;
import com.pigtrax.jobs.dto.GroupStatusReportDataDto;
import com.pigtrax.master.dao.interfaces.PremisesDao;
import com.pigtrax.master.dto.Premises;
import com.pigtrax.pigevents.beans.CompanyTarget;
import com.pigtrax.pigevents.beans.GroupEvent;
import com.pigtrax.pigevents.dao.interfaces.CompanyTargetDao;
import com.pigtrax.pigevents.dao.interfaces.GroupEventDao;
import com.pigtrax.pigevents.dao.interfaces.GroupEventDetailsDao;
import com.pigtrax.pigevents.dao.interfaces.GroupEventRoomDao;

@Repository
@Transactional
public class GroupStatusReportDao {

	private static final Logger logger = Logger.getLogger(GroupStatusReportDao.class);

	private JdbcTemplate jdbcTemplate;
	
	@Autowired
	GroupEventDao groupDao;
	
	@Autowired
	PremisesDao premisesDao;
	
	
	@Autowired
	CompanyTargetDao companyTargetDao;
	
	@Autowired
	RefDataCache refDataCache;	
	
	@Autowired
	GroupEventRoomDao eventRoomDao;
	
	@Autowired
	GroupEventDetailsDao groupEventDetailsDao;
	

	@Autowired
	public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
		this.jdbcTemplate.setQueryTimeout(10*60); 
	}
	
	public List<GroupStatusReportDataDto> getGroupStatusList(Integer companyId, String selectedPremise, Date inputStartDate, Date inputEndDate, 
								List<Map<String, Object>> rangeList,  String language, String reportType, String selectedSowSource) throws Exception
	{	
		List<GroupStatusReportDataDto> resultList = new ArrayList<GroupStatusReportDataDto>();
		
		Premises sourcePremise = null;
		if(selectedSowSource != null && !selectedSowSource.equals("-1"))
			sourcePremise = premisesDao.findByPremisesByAutoGeneratedId(Integer.parseInt(selectedSowSource));
		
		String[] premiseIds = null;
		if(selectedPremise != null) premiseIds = selectedPremise.split(",");
		
		if(premiseIds != null && 0 < premiseIds.length)
		{
			for(String premiseId : premiseIds)
			{
				Map<String, Object> row = rangeList.get(0);
				CompanyTarget target = companyTargetDao.getCompanyTargetByType(Integer.parseInt(premiseId), 122); // Target type id for DOF
				List<GroupStatusReportDataDto> groups = getAllGroupData(Integer.parseInt(premiseId), inputStartDate, inputEndDate, selectedSowSource, reportType);
				resultList.addAll(groups);
			}
		}
		
		return resultList;
	}
	
	
	
	
	
	
	
	/**
	  * Get all the groups in a premise
	  * @param premiseId
	  * @return
	  */
	 public List<GroupStatusReportDataDto> getAllGroupData(final Integer premiseId,  final Date inputStartDate, final Date inputEndDate, final String selectedSowSource, final String reportType)
	 {	
		 
		   String reportMode = "";
		   if(reportType != null && "current".equalsIgnoreCase(reportType))
			   reportMode = "I";
			else if(reportType != null && "mortality".equalsIgnoreCase(reportType))
				reportMode = "M";
		 
			String qry = "SELECT * from pigtrax.\"GroupStatusReportData\" GSRD where  GSRD.\"id_Premise\" =? and "
					+ " (GSRD.\"eventStartDate\" between ? and ? or (GSRD.\"eventCloseDate\" != null AND GSRD.\"eventCloseDate\" between ? and ?)) ";
			qry += " and GSRD.\"id\" in (select max(\"id\") from pigtrax.\"GroupStatusReportData\" where  \"type\" = '"+reportMode+"' group by \"id_GroupEvent\") ";
			if(selectedSowSource != null && !selectedSowSource.equals("-1"))
				qry += " AND GSRD.\"id_SowSource\" = ? ";	
			
				qry += " AND GSRD.\"type\" = '"+reportMode+"' ";
			qry += "  order by GSRD.\"eventStartDate\" ";
			

			List<GroupStatusReportDataDto> groupEventList = jdbcTemplate.query(qry, new PreparedStatementSetter(){
				@Override
				public void setValues(PreparedStatement ps) throws SQLException {	
					ps.setInt(1, premiseId);
					ps.setDate(2, new java.sql.Date(inputStartDate.getTime()));
					ps.setDate(3, new java.sql.Date(inputEndDate.getTime()));
					ps.setDate(4, new java.sql.Date(inputStartDate.getTime()));
					ps.setDate(5, new java.sql.Date(inputEndDate.getTime()));
					
					if(selectedSowSource != null && !selectedSowSource.equals("-1"))
						ps.setInt(6, Integer.parseInt(selectedSowSource));
				}}, new GroupStatusReportDataDtoMapper());
			
			return groupEventList;
		}
		
		private static final class GroupStatusReportDataDtoMapper implements RowMapper<GroupStatusReportDataDto> {
			public GroupStatusReportDataDto mapRow(ResultSet rs, int rowNum) throws SQLException {
				GroupStatusReportDataDto groupEvent = new GroupStatusReportDataDto();
				groupEvent.setGroupEventId(rs.getInt("id_GroupEvent"));
				groupEvent.setGroupId(rs.getString("groupId"));
				groupEvent.setGroupStartDate(rs.getDate("eventStartDate"));
				groupEvent.setGroupCloseDate(rs.getDate("eventCloseDate"));				
				groupEvent.setCalendarWk(rs.getInt("calendarWk"));				
				groupEvent.setStartHd(new Long(rs.getInt("startHd"))); 
				groupEvent.setStartWt(rs.getDouble("startWt"));
				groupEvent.setType(rs.getString("type"));
				groupEvent.setSowSource(rs.getString("sowSource"));
				groupEvent.setPhaseTypeId(rs.getInt("id_PhaseType"));
				groupEvent.setRoomId(rs.getString("roomId"));
				groupEvent.setBarnId(rs.getString("barnId"));
				groupEvent.setPremiseId(rs.getString("premiseId"));
				groupEvent.setInventory(rs.getInt("inventory"));
				groupEvent.setSales(rs.getInt("sales"));
				groupEvent.setDeads(rs.getInt("deads"));
				groupEvent.setMortalityPercentage(rs.getDouble("mortalityPercentage"));
				groupEvent.setDensity(rs.getDouble("density"));
				groupEvent.setProjectedSaleDate(rs.getDate("projectedSaleDate"));
				groupEvent.setProjectedSaleWk(rs.getInt("projectedSaleWk"));
				
				Map<Integer, Integer> weekMap = new HashMap<Integer, Integer>();
				
				int i = 1;
				while(i<=26)
				{	
					weekMap.put(i, rs.getInt("W"+i));
					i++;
				}
				if(groupEvent.getType().equalsIgnoreCase("I"))
					groupEvent.setInventoryCntMap(weekMap);
				else
					groupEvent.setMortalityCntMap(weekMap);
				
				return groupEvent;
			}
		}
	
	
	
}
