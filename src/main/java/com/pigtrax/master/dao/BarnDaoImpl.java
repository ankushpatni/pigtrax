package com.pigtrax.master.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.pigtrax.master.dao.interfaces.BarnDao;
import com.pigtrax.master.dto.Barn;
import com.pigtrax.pigevents.dto.BarnDto;
import com.pigtrax.util.UserUtil;

@Repository
@Transactional
public class BarnDaoImpl implements BarnDao {

	private static final Logger logger = Logger.getLogger(BarnDaoImpl.class);

	private JdbcTemplate jdbcTemplate;

	@Autowired
	public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}

	@Override
	public List<Barn> getBarnList(final int generatedPremisesId) {
		String query = "SELECT \"id\",\"barnId\", \"id_Premise\", \"id_PhaseType\", \"location\", \"area\", \"feederCount\","+
						" \"waterAccessCount\", \"isActive\", \"id_VentilationType\",\"id_BarnOrientation\",\"id_BarnLocation\", \"id_WaterType\","
						+ " \"id_BarnPosition\", \"id_FeederType\",\"holesPerFeeder\", \"remarks\",\"year\" "
						+ " from pigtrax.\"Barn\" where \"id_Premise\" = ? order by \"id\" desc ";

		List<Barn> barnList = jdbcTemplate.query(query, new PreparedStatementSetter(){
			@Override
			public void setValues(PreparedStatement ps) throws SQLException {
				ps.setInt(1, generatedPremisesId);
			}}, new BarnMapper());
		
		return barnList;
	}

	@Override
	public int updateBarnStatus(final String barnID, final Boolean barnStatus)
			throws SQLException {
		String query = "update pigtrax.\"Barn\" SET \"isActive\"=?  WHERE \"barnId\"=?";

		logger.info("Status-->" + barnStatus);
		logger.info("barnID-->" + barnID);
		return this.jdbcTemplate.update(query, new PreparedStatementSetter() {
			@Override
			public void setValues(PreparedStatement ps) throws SQLException {
				ps.setBoolean(1, !barnStatus);
				ps.setString(2, barnID.toUpperCase());
			}
		});
	}
	
	@Override
	public Barn findByBarnByAutoGeneratedId(
			final int generatedBarnId) {
		String query = "SELECT \"id\",\"barnId\", \"id_Premise\", \"id_PhaseType\", \"location\", \"area\", \"feederCount\","+
				" \"waterAccessCount\", \"isActive\", \"id_VentilationType\",\"id_BarnOrientation\",\"holesPerFeeder\",\"remarks\",\"id_BarnLocation\","
				+ "\"id_BarnPosition\", \"id_WaterType\",\"id_FeederType\",\"year\" from pigtrax.\"Barn\" where \"id\" = ? ";

		List<Barn> barnList = jdbcTemplate.query(query,
				new PreparedStatementSetter() {
					@Override
					public void setValues(PreparedStatement ps)
							throws SQLException {
						ps.setInt(1, generatedBarnId);
					}
				}, new BarnMapper());

		if (barnList != null && barnList.size() > 0) {
			return barnList.get(0);
		}

		return null;
	}
	

	@Override
	public int insertBarnRecord(final Barn barn) throws SQLException {
		String query = "INSERT INTO pigtrax.\"Barn\"(  \"barnId\", \"id_Premise\", \"id_PhaseType\", location, area, \"feederCount\", \"waterAccessCount\", "
				 +" \"isActive\", \"lastUpdated\",\"userUpdated\",\"id_VentilationType\",\"id_BarnOrientation\","
				 + "\"id_BarnLocation\", \"id_WaterType\", \"id_BarnPosition\", \"id_FeederType\",\"holesPerFeeder\", \"remarks\",\"year\")"+
				 "VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?, ?,?)";
	
		return this.jdbcTemplate.update(query, new PreparedStatementSetter() {
			@Override
			public void setValues(PreparedStatement ps) throws SQLException {
				ps.setString(1, barn.getBarnId().toUpperCase());
				ps.setInt(2, barn.getPremiseId());
				ps.setInt(3, barn.getPhaseTypeId());
				ps.setString(4, barn.getLocation());
				ps.setBigDecimal(5, barn.getArea());
				ps.setInt(6, barn.getFeederCount());
				ps.setInt(7, barn.getWaterAccessCount());
				ps.setBoolean(8, barn.isActive());
				ps.setDate(9, new java.sql.Date(System.currentTimeMillis()));
				ps.setString(10, barn.getUserUpdated());
				if(barn.getVentilationTypeId() != 0)
				{
					ps.setInt(11, barn.getVentilationTypeId());
				}
				else
				{
					ps.setNull(11, java.sql.Types.INTEGER);
				}
				if(barn.getBarnOrientationId() != null && barn.getBarnOrientationId() != 0)
				{
					ps.setInt(12, barn.getBarnOrientationId());
				}
				else
				{
					ps.setNull(12, java.sql.Types.INTEGER);
				}
				if(barn.getBarnLocationId() != null && barn.getBarnLocationId() != 0)
				{
					ps.setInt(13, barn.getBarnLocationId());
				}
				else
				{
					ps.setNull(13, java.sql.Types.INTEGER);
				}
				if(barn.getWaterTypeId() != null && barn.getWaterTypeId() != 0)
				{
					ps.setInt(14, barn.getWaterTypeId());
				}
				else
				{
					ps.setNull(14, java.sql.Types.INTEGER);
				}	
				if(barn.getBarnPositionId() != null && barn.getBarnPositionId() != 0)
				{
					ps.setInt(15, barn.getBarnPositionId());
				}
				else
				{
					ps.setNull(15, java.sql.Types.INTEGER);
				}	
				if(barn.getFeederTypeId() != null && barn.getFeederTypeId() != 0)
				{
					ps.setInt(16, barn.getFeederTypeId());
				}
				else
				{
					ps.setNull(16, java.sql.Types.INTEGER);
				}
				
				ps.setObject(17, barn.getHolesPerFeeder(),  java.sql.Types.INTEGER);
				ps.setString(18, barn.getRemarks());
				ps.setObject(19, barn.getYear(),  java.sql.Types.INTEGER);
			
				
			}
		});	
	}

	@Override
	public int updateBarnRecord(final Barn barn) throws SQLException {
		String query = "update pigtrax.\"Barn\" SET \"id_PhaseType\"=?, location=?, area=?, \"feederCount\"=?, \"waterAccessCount\"=?, \"lastUpdated\"=?,"+
						" \"userUpdated\"=?,\"id_VentilationType\"=?,\"id_BarnOrientation\" = ?,\"id_BarnLocation\"=?, \"id_WaterType\"= ?,"
						+ " \"id_BarnPosition\"=?, \"id_FeederType\"=?,\"holesPerFeeder\" = ?, \"remarks\" = ?,\"year\"=? "
						+ "  WHERE \"barnId\"=?";
		return this.jdbcTemplate.update(query, new PreparedStatementSetter() {
			@Override
			public void setValues(PreparedStatement ps) throws SQLException {
				ps.setInt(1, barn.getPhaseTypeId());
				ps.setString(2, barn.getLocation());
				ps.setBigDecimal(3, barn.getArea());
				ps.setInt(4, barn.getFeederCount());
				ps.setInt(5, barn.getWaterAccessCount());
				ps.setDate(6, new java.sql.Date(System.currentTimeMillis()));
				ps.setString(7, barn.getUserUpdated());
				
				if(barn.getVentilationTypeId() != 0)
				{
					ps.setInt(8, barn.getVentilationTypeId());
				}
				else
				{
					ps.setNull(8, java.sql.Types.INTEGER);
				}
				if(barn.getBarnOrientationId() != 0)
				{
					ps.setInt(9, barn.getBarnOrientationId());
				}
				else
				{
					ps.setNull(9, java.sql.Types.INTEGER);
				}
				if(barn.getBarnLocationId() != 0)
				{
					ps.setInt(10, barn.getBarnLocationId());
				}
				else
				{
					ps.setNull(10, java.sql.Types.INTEGER);
				}
				if(barn.getWaterTypeId() != 0)
				{
					ps.setInt(11, barn.getWaterTypeId());
				}
				else
				{
					ps.setNull(11, java.sql.Types.INTEGER);
				}
				if(barn.getBarnPositionId() != 0)
				{
					ps.setInt(12, barn.getBarnPositionId());
				}
				else
				{
					ps.setNull(12, java.sql.Types.INTEGER);
				}
				if(barn.getFeederTypeId() != 0)
				{
					ps.setInt(13, barn.getFeederTypeId());
				}
				else
				{
					ps.setNull(13, java.sql.Types.INTEGER);
				}
				
				ps.setObject(14, barn.getHolesPerFeeder(), java.sql.Types.INTEGER);
				
				ps.setString(15, barn.getRemarks());
				
				ps.setObject(16, barn.getYear(), java.sql.Types.INTEGER);
				
				ps.setString(17, barn.getBarnId().toUpperCase());
			}
		});
	}
		
	private static final class BarnMapper implements RowMapper<Barn> {
		public Barn mapRow(ResultSet rs, int rowNum) throws SQLException {
			Barn barn = new Barn();
			barn.setId(rs.getInt("id"));
			barn.setBarnId(rs.getString("barnId"));
			barn.setPremiseId(rs.getInt("id_Premise"));
			barn.setPhaseTypeId(rs.getInt("id_PhaseType"));
			barn.setLocation(rs.getString("location"));
			barn.setArea(rs.getBigDecimal("area"));
			barn.setFeederCount(rs.getInt("feederCount"));
			barn.setWaterAccessCount(rs.getInt("waterAccessCount"));
			barn.setActive(rs.getBoolean("isActive"));
			barn.setVentilationTypeId(rs.getInt("id_VentilationType"));
			barn.setBarnOrientationId(rs.getInt("id_BarnOrientation"));
			barn.setBarnLocationId(rs.getInt("id_BarnLocation"));
			barn.setWaterTypeId(rs.getInt("id_WaterType"));
			barn.setBarnPositionId(rs.getInt("id_BarnPosition"));
			barn.setFeederTypeId(rs.getInt("id_FeederType"));
			barn.setHolesPerFeeder(rs.getInt("holesPerFeeder"));
			barn.setRemarks(rs.getString("remarks"));
			barn.setYear(rs.getInt("year"));
			return barn;
		}
	}
	
	
	/**
	 * To retrieve the list of Barns in a company
	 * 
	 * @throws SQLException
	 */
	public List<Barn> getBarns(final Integer companyId) throws SQLException {
		BarnDto dto = null;
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		
		String Qry = "SELECT \"id\", \"barnId\",\"id_Premise\",\"id_PhaseType\", \"location\", "
				+ "\"area\",\"feederCount\",\"waterAccessCount\",\"id_VentilationType\",\"isActive\",\"id_BarnOrientation\",\"id_BarnLocation\", "
				+ "\"id_WaterType\", \"id_BarnPosition\", \"id_FeederType\", \"holesPerFeeder\",\"remarks\",\"year\" "
				+ "from pigtrax.\"Barn\" where \"isActive\" is true and \"id_Premise\" in "
				+ "( Select \"id\" from pigtrax.\"Premise\" where \"id_Company\" = ?::smallint) order by \"barnId\"";
		List<Barn> barnList = jdbcTemplate.query(Qry, new PreparedStatementSetter(){
			@Override
			public void setValues(PreparedStatement ps) throws SQLException {
				ps.setInt(1, companyId);
			}}, new BarnMapper());
		
		return barnList;
	}
	
	/*
	 * Get barn list based on companyId from View
	 * 
	 */
	
	public List<Barn> getBarnListBasedOnCompanyId( final int generatedCompanyId ) throws SQLException
	{
		String query = "SELECT \"barnserialid\" as \"id\",\"barnId\" from pigtrax.\"CompPremBarnSiloVw\" where \"barnId\" != '' and companyserialid = ?";
	//CompPremBarnRoomPenVw
		List<Barn> barnList = jdbcTemplate.query(query,
				new PreparedStatementSetter() {
					@Override
					public void setValues(PreparedStatement ps)
							throws SQLException {
						ps.setInt(1, generatedCompanyId);
					}
				}, new BarnMapperList());
	
		if (barnList != null && barnList.size() > 0) {
			return  barnList;
		}
		return null;
	}
	
	@Override
	public Barn getBarnBasedOnPenId( final int penId ) throws SQLException
	{
		String query = "SELECT \"barnserialid\" as \"id\",\"barnId\" from pigtrax.\"CompPremBarnRoomPenVw\" where \"barnId\" != '' and penserialid = ?";
		
	//CompPremBarnRoomPenVw
		List<Barn> barnList = jdbcTemplate.query(query,
				new PreparedStatementSetter() {
					@Override
					public void setValues(PreparedStatement ps)
							throws SQLException {
						ps.setInt(1, penId);
					}
				}, new BarnMapperList());
	
		if (barnList != null && barnList.size() > 0) {
			return  barnList.get(0);
		}
		return null;
	}
	
	
	@Override
	public Barn getBarnBasedOnRoomId( final int roomId ) throws SQLException
	{
		String query = "SELECT \"barnserialid\" as \"id\",\"barnId\" from pigtrax.\"CompPremBarnRoomPenVw\" where \"barnId\" != '' and roomserrialid = ?";
		
	//CompPremBarnRoomPenVw
		List<Barn> barnList = jdbcTemplate.query(query,
				new PreparedStatementSetter() {
					@Override
					public void setValues(PreparedStatement ps)
							throws SQLException {
						ps.setInt(1, roomId);
					}
				}, new BarnMapperList());
	
		if (barnList != null && barnList.size() > 0) {
			return  barnList.get(0);
		}
		return null;
	}
	private static final class BarnMapperList implements RowMapper<Barn> {
		public Barn mapRow(ResultSet rs, int rowNum) throws SQLException {
			Barn barn = new Barn();
			barn.setId(rs.getInt("id"));
			barn.setBarnId(rs.getString("barnId"));
			return barn;
		}
	}


}

