package com.pigtrax.master.service;

import java.sql.SQLException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.pigtrax.master.dao.interfaces.BarnDao;
import com.pigtrax.master.dao.interfaces.PremisesDao;
import com.pigtrax.master.dto.Barn;
import com.pigtrax.master.dto.Premises;
import com.pigtrax.master.service.interfaces.PremisesService;

@Repository
public class PremisesServiceImpl implements PremisesService{

	@Autowired
	private PremisesDao premisesDao;
	
	@Autowired
	BarnDao barnDao;
	

	@Override
	public List<Premises> getPremisesList(int generatedCompanyId) {
		return premisesDao.getPremisesList( generatedCompanyId );
	}

	@Override
	public int updatePremisesStatus(String premisesID, Boolean premisesStatus)
			throws SQLException {
		return premisesDao.updatePremisesStatus(premisesID, premisesStatus);
	}
	
	@Override
	public int insertPremisesRecord(Premises premises) throws SQLException
	{
		return premisesDao.insertPremisesRecord(premises);
	}
	
	@Override
	public int updatePremisesRecord(Premises premises) throws SQLException
	{
		return premisesDao.updatePremisesRecord(premises);
	}

	@Override
	public Premises findByPremisesByAutoGeneratedId(int generatedPremisesId)
			throws SQLException
	{
		return premisesDao.findByPremisesByAutoGeneratedId(generatedPremisesId);
	}
	
	@Override
	public Map<Integer,String> getPremisesListBasedOnCompanyId(int generatedCompanyId)
			throws SQLException {
		Map<Integer,String> premisesIdMap = new LinkedHashMap<Integer,String>();
		try
		{
		List<Premises> premisesList =  premisesDao.getPremisesListBasedOnCompanyId(generatedCompanyId);
			if(null != premisesList && premisesList.size()>0)
			{
				for(Premises premises : premisesList)
				{
					premisesIdMap.put(premises.getId(),premises.getPermiseId());
				}
			}
		}
		catch(SQLException e)
		{
			e.printStackTrace();
		}
		return premisesIdMap;
	}
	
	
	@Override 
	public int deletePremise(int premiseId) {
		
		List<Barn> barnList = barnDao.getBarnList(premiseId);
		boolean deleteable = true;
		int rowsDeleted = 0;
		
		if(barnList != null)
		{
			for(Barn barn : barnList)
			{
				if(barn.isActive())
				{
					deleteable = false;
					break;
				}
			}
		}
		
		if(deleteable)
			rowsDeleted = premisesDao.deletePremiseData(premiseId);
		
		return rowsDeleted;
	}

}
