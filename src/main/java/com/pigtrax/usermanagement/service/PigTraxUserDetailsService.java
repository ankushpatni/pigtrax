package com.pigtrax.usermanagement.service;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;

import com.pigtrax.usermanagement.beans.Company;
import com.pigtrax.usermanagement.beans.Employee;
import com.pigtrax.usermanagement.beans.PigTraxUser;
import com.pigtrax.usermanagement.dao.interfaces.CompanyDao;
import com.pigtrax.usermanagement.dao.interfaces.EmployeeDao;

public class PigTraxUserDetailsService implements UserDetailsService {

	@Autowired
	private EmployeeDao employeeDao;
	@Autowired
	private CompanyDao companyDao;
	
	
	public UserDetails loadUserByUsername(String username)
			throws UsernameNotFoundException {
		com.pigtrax.usermanagement.beans.Employee employee = null;
		Company company = null;
		try {
			employee = employeeDao.findByUserName(username);
			company = companyDao.findByCompanyByAutoGeneratedId(employee.getCompanyId());
		} catch (SQLException e) {
			e.printStackTrace();
			new UsernameNotFoundException("User not found");
		}
		
		
		
		List<GrantedAuthority> authorities = buildUserAuthority(employee); 
		return buildUserForAuthentication(employee, authorities, company);
	}
	
	/**
	 * Build spring security core UserDetails object based on the logged in user information
	 * @param employee
	 * @param authorities
	 * @return
	 */
	private User buildUserForAuthentication(Employee employee, List<GrantedAuthority> authorities, Company company) {
			return new PigTraxUser(employee.getEmployeeId(), 
					employee.getPtPassword(), employee.isEnabled(), 
	                        true, true, true, authorities, new Integer(employee.getUserRoleId()), new Integer(employee.getCompanyId()), company.getName()); 
		}
	
	private List<GrantedAuthority> buildUserAuthority(Employee e) {

		Set<GrantedAuthority> setAuths = new HashSet<GrantedAuthority>();
		setAuths.add(new SimpleGrantedAuthority(String.valueOf(e.getUserRoleId())));
		List<GrantedAuthority> Result = new ArrayList<GrantedAuthority>(
				setAuths);

		return Result;
	}
}
